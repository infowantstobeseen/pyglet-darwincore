#!/usr/bin/env python

'''Generate files in pyglet/GL and pyglet/GLU
'''

__docformat__ = 'restructuredtext'
__version__ = '$Id$'

import marshal
import optparse
import os.path
import urllib2
import sys
import textwrap

from wraptypes.wrap import CtypesWrapper

GLEXT_LOCAL_H = '/usr/include/GL/glext.h'
GLEXT_ABI_H = 'http://oss.sgi.com/projects/ogl-sample/ABI/glext.h'
GLEXT_NV_H = 'http://developer.download.nvidia.com/opengl/includes/glext.h'
GLXEXT_ABI_H = 'http://oss.sgi.com/projects/ogl-sample/ABI/glxext.h'
GLXEXT_NV_H = 'http://developer.download.nvidia.com/opengl/includes/glxext.h'
WGLEXT_ABI_H = 'http://oss.sgi.com/projects/ogl-sample/ABI/wglext.h'
WGLEXT_NV_H = 'http://developer.download.nvidia.com/opengl/includes/wglext.h'

AGL_H = '/System/Library/Frameworks/AGL.framework/Headers/agl.h'
GL_H = '/usr/include/GL/gl.h'
GLU_H = '/usr/include/GL/glu.h'
GLX_H = '/usr/include/GL/glx.h'
GLEXT_H = GLEXT_LOCAL_H   
GLXEXT_H = GLXEXT_ABI_H
WGLEXT_H = WGLEXT_ABI_H

script_dir = os.path.abspath(os.path.dirname(__file__))
CACHE_FILE = os.path.join(script_dir, '.gengl.cache')
_cache = {}

def load_cache():
    global _cache
    if os.path.exists(CACHE_FILE):
        try:
            _cache = marshal.load(open(CACHE_FILE, 'rb')) or {}
        except:
            pass
    _cache = {}

def save_cache():
    try:
        marshal.dump(_cache, open(CACHE_FILE, 'wb'))
    except:
        pass

def read_url(url):
    if url in _cache:
        return _cache[url]
    if url[0] == '/':
        data = open(url).read()
    else:
        data = urllib2.urlopen(url).read()
    _cache[url] = data
    save_cache()
    return data

class GLWrapper(CtypesWrapper):
    link_function = 'link_GL'
    requires = None

    def __init__(self, header, library_module, file):
        self.header = header
        self.library_module = library_module
        super(GLWrapper, self).__init__(None, file)

    def print_preamble(self):
        import time
        print >> self.file, textwrap.dedent("""
            '''Wrapper for %(header)s

            Generated by %(script)s.
            Do not modify this file.
            '''

            __docformat__ = 'restructuredtext'
            __version__ = '$Id$'

            from ctypes import *
            from %(library_module)s import %(link_function)s as _link_function
            from %(library_module)s import c_ptrdiff_t
        """ % {
            'header': self.header,
            'date': time.ctime(),
            'script': __file__,
            'library_module': self.library_module,
            'link_function': self.link_function,
        }).lstrip()

    def handle_ctypes_function(self, name, restype, argtypes, filename, lineno):
        if self.does_emit(name, filename):
            self.emit_type(restype)
            for a in argtypes:
                self.emit_type(a)

            self.all_names.append(name)
            print >> self.file, '# %s:%d' % (filename, lineno)
            print >> self.file, '%s = _link_function(%r, %s, [%s], %r)' % \
              (name, name, str(restype), 
               ', '.join([str(a) for a in argtypes]), self.requires)
            print >> self.file
             
class GLEXTWrapper(GLWrapper):
    def handle_ifndef(self, name, filename, lineno):
        if name[:3] == 'GL_':
            self.requires = name[3:]
            print >> self.file, '# %s (%s:%d)'  % \
                (self.requires, filename, lineno)

def write_gl(dir):
    progress('Generating GL...')
    source = read_url(GL_H)
    outfile = open(os.path.join(dir, 'GL.py'), 'w')
    wrapper = GLWrapper('gl.h', 'pyglet.GL.lib', outfile)
    wrapper.wrap(GL_H, source)

def write_glu(dir):
    progress('Generating GLU...')
    source = read_url(GLU_H)
    outfile = open(os.path.join(dir, 'GLU.py'), 'w')
    wrapper = GLWrapper('glu.h', 'pyglet.GL.lib', outfile)
    wrapper.link_function = 'link_GLU'
    wrapper.wrap(GLU_H, source)

def write_glx(dir):
    progress('Generating GLX...')
    source = read_url(GLX_H)
    outfile = open(os.path.join(dir, 'GLX.py'), 'w')
    wrapper = GLWrapper('glx.h', 'pyglet.GL.lib', outfile)
    wrapper.link_function = 'link_GLX'
    wrapper.wrap(GLX_H, source)

def write_glext(dir):
    progress('Generating GLEXT...')
    source = read_url(GLEXT_H)
    source = '#defineGL_GLEXT_PROTOTYPES\n#include <GL/gl.h>\n' + source
    outfile = open(os.path.join(dir, 'GLEXT.py'), 'w')
    wrapper = GLEXTWrapper('glext.h', 'pyglet.GL.lib', outfile)
    wrapper.wrap(GLEXT_H, source)

def write_agl(dir):
    progress('Generating AGL...')
    source = read_url(AGL_H)
    outfile = open(os.path.join(dir, 'AGL.py'), 'w')
    wrapper = GLWrapper('agl.h', 'pyglet.GL.lib', outfile)
    wrapper.link_function = 'link_AGL'
    wrapper.wrap(AGL_H, source)

def progress(msg):
    print >> sys.stderr, msg
        
if __name__ == '__main__':
    op = optparse.OptionParser()
    op.add_option('-D', '--dir', dest='dir',
                  help='generate files in DIR', metavar='DIR')
    op.add_option('-r', '--refresh-cache', dest='refresh_cache',
                  help='clear cache first')
    options, args = op.parse_args()

    if not options.refresh_cache:
        load_cache()
    else:
        save_cache()

    if not options.dir:
        options.dir = os.path.join(script_dir, os.path.pardir, 'pyglet', 'GL')
    if not os.path.exists(options.dir):
        os.path.makedirs(options.dir)
    if not args:
        print >> sys.stderr, 'Specify module(s) to generate:'
        print >> sys.stderr, '  agl gl glext glu glx wgl'

    for arg in args:
        if arg == 'gl':
            write_gl(options.dir)
        elif arg == 'glx':
            glxdir = os.path.join(options.dir, 'GLX')
            if not os.path.exists(glxdir):
                os.path.makedirs(glxdir)
            write_glx(glxdir)
        elif arg == 'glu':
            write_glu(options.dir)
        elif arg == 'glext':
            write_glext(options.dir)
        elif arg == 'agl':
            agldir = os.path.join(options.dir, 'AGL')
            if not os.path.exists(agldir):
                os.path.makedirs(agldir)
            write_agl(agldir)
