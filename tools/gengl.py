#!/usr/bin/env python

'''Generate files in pyglet/GL and pyglet/GLU
'''

__docformat__ = 'restructuredtext'
__version__ = '$Id$'

import marshal
import optparse
import os.path
import urllib2
import sys
import textwrap

from wraptypes.wrap import CtypesWrapper

GLEXT_ABI_H = 'http://oss.sgi.com/projects/ogl-sample/ABI/glext.h'
GLEXT_NV_H = 'http://developer.download.nvidia.com/opengl/includes/glext.h'
GLXEXT_ABI_H = 'http://oss.sgi.com/projects/ogl-sample/ABI/glxext.h'
GLXEXT_NV_H = 'http://developer.download.nvidia.com/opengl/includes/glxext.h'
WGLEXT_ABI_H = 'http://oss.sgi.com/projects/ogl-sample/ABI/wglext.h'
WGLEXT_NV_H = 'http://developer.download.nvidia.com/opengl/includes/wglext.h'

AGL_H = '/System/Library/Frameworks/AGL.framework/Headers/agl.h'
GL_H = '/usr/include/GL/gl.h'
GLU_H = '/usr/include/GL/glu.h'
GLX_H = '/usr/include/GL/glx.h'

script_dir = os.path.abspath(os.path.dirname(__file__))
CACHE_FILE = os.path.join(script_dir, '.gengl.cache')
_cache = {}

def load_cache():
    global _cache
    if os.path.exists(CACHE_FILE):
        try:
            _cache = marshal.load(open(CACHE_FILE, 'rb')) or {}
        except:
            pass
    _cache = {}

def save_cache():
    try:
        marshal.dump(_cache, open(CACHE_FILE, 'wb'))
    except:
        pass

def read_url(url):
    if url in _cache:
        return _cache[url]
    if url[0] == '/':
        data = open(url).read()
    else:
        data = urllib2.urlopen(url).read()
    _cache[url] = data
    save_cache()
    return data

class GLWrapper(CtypesWrapper):
    link_function = 'link_GL'
    requires = None
    requires_prefix = None

    def __init__(self, header, library_module, file):
        self.header = header
        self.library_module = library_module
        super(GLWrapper, self).__init__(None, file)

    def print_preamble(self):
        import time
        print >> self.file, textwrap.dedent("""
            '''Wrapper for %(header)s

            Generated by %(script)s.
            Do not modify this file.
            '''

            __docformat__ = 'restructuredtext'
            __version__ = '$Id$'

            from ctypes import *
            from %(library_module)s import %(link_function)s as _link_function
            from %(library_module)s import c_ptrdiff_t
        """ % {
            'header': self.header,
            'date': time.ctime(),
            'script': __file__,
            'library_module': self.library_module,
            'link_function': self.link_function,
        }).lstrip()

    def handle_ctypes_function(self, name, restype, argtypes, filename, lineno):
        if self.does_emit(name, filename):
            self.emit_type(restype)
            for a in argtypes:
                self.emit_type(a)

            self.all_names.append(name)
            print >> self.file, '# %s:%d' % (filename, lineno)
            print >> self.file, '%s = _link_function(%r, %s, [%s], %r)' % \
              (name, name, str(restype), 
               ', '.join([str(a) for a in argtypes]), self.requires)
            print >> self.file

    def handle_ifndef(self, name, filename, lineno):
        if self.requires_prefix and \
           name[:len(self.requires_prefix)] == self.requires_prefix:
            self.requires = name[len(self.requires_prefix):]
            print >> self.file, '# %s (%s:%d)'  % \
                (self.requires, filename, lineno)

def write_gl(dir):
    progress('Generating GL...')
    source = read_url(GL_H)
    outfile = open(os.path.join(dir, 'GL.py'), 'w')
    wrapper = GLWrapper('gl.h', 'pyglet.GL.lib', outfile)
    wrapper.wrap(GL_H, source)

def write_glu(dir):
    progress('Generating GLU...')
    source = read_url(GLU_H)
    outfile = open(os.path.join(dir, 'GLU.py'), 'w')
    wrapper = GLWrapper('glu.h', 'pyglet.GL.lib', outfile)
    wrapper.link_function = 'link_GLU'
    wrapper.wrap(GLU_H, source)

def write_glx(dir):
    progress('Generating GLX...')
    source = read_url(GLX_H)
    outfile = open(os.path.join(dir, 'GLX.py'), 'w')
    wrapper = GLWrapper('glx.h', 'pyglet.GL.lib', outfile)
    wrapper.link_function = 'link_GLX'
    wrapper.wrap(GLX_H, source)

def write_glext(dir):
    progress('Generating GLEXT...')
    source = read_url(GLEXT_H)
    source = '#defineGL_GLEXT_PROTOTYPES\n#include <GL/gl.h>\n' + source
    outfile = open(os.path.join(dir, 'GLEXT.py'), 'w')
    wrapper = GLEXTWrapper('glext.h', 'pyglet.GL.lib', outfile)
    wrapper.wrap(GLEXT_H, source)

class ModuleWrapper(object):
    def __init__(self, header, filename, link_function='link_GL', 
                 prologue='', requires_prefix=None, system_header=None):
        self.header = header
        self.filename = filename
        self.link_function = link_function
        self.prologue = prologue
        self.requires_prefix = requires_prefix
        self.system_header = system_header

    def wrap(self, dir):
        progress('Generating %s...' % self.filename)
        source = read_url(self.header) 
        outfile = open(os.path.join(dir, self.filename), 'w')
        wrapper = GLWrapper(self.header, 'pyglet.GL.lib', outfile)
        if self.system_header:
            wrapper.preprocessor_parser.system_headers[self.system_header] = \
                source
        wrapper.link_function = self.link_function
        wrapper.requires_prefix = self.requires_prefix
        source = self.prologue + source
        header_name = self.system_header or self.header
        wrapper.wrap(header_name, source)

def write_agl(dir):
    progress('Generating AGL...')
    source = read_url(AGL_H)
    outfile = open(os.path.join(dir, 'AGL.py'), 'w')
    wrapper = GLWrapper('agl.h', 'pyglet.GL.lib', outfile)
    wrapper.link_function = 'link_AGL'
    wrapper.wrap(AGL_H, source)

def progress(msg):
    print >> sys.stderr, msg

modules = {
    'gl':  
        ModuleWrapper(GL_H, 'gl.py'),
    'glu': 
        ModuleWrapper(GLU_H, 'glu.py', link_function='link_GLU'),
    'glext_abi': 
        ModuleWrapper(GLEXT_ABI_H, 'glext_abi.py', 
            requires_prefix='GL_', system_header='GL/glext.h',
            prologue='#define GL_GLEXT_PROTOTYPES\n#include <GL/gl.h>\n'),
    'glext_nv': 
        ModuleWrapper(GLEXT_NV_H, 'glext_nv.py',
            requires_prefix='GL_', system_header='GL/glext.h',
            prologue='#define GL_GLEXT_PROTOTYPES\n#include <GL/gl.h>\n'),
    'glx': 
        ModuleWrapper(GLX_H, 'glx.py', link_function='link_GLX'),
    'glxext_abi': 
        ModuleWrapper(GLXEXT_ABI_H, 'glxext_abi.py', requires_prefix='GLX_',
            link_function='link_GLX', system_header='GL/glxext.h',
            prologue='#define GLX_GLXEXT_PROTOTYPES\n#include <GL/glx.h>\n'),
    'glxext_nv': 
        ModuleWrapper(GLXEXT_NV_H, 'glxext_nv.py', requires_prefix='GLX_',
            link_function='link_GLX', system_header='GL/glxext.h',
            prologue='#define GLX_GLXEXT_PROTOTYPES\n#include <GL/glx.h>\n'),
    'agl':
        ModuleWrapper(AGL_H, 'agl.py', link_function='link_AGL'),
            
}


if __name__ == '__main__':
    op = optparse.OptionParser()
    op.add_option('-D', '--dir', dest='dir',
                  help='output directory')
    op.add_option('-r', '--refresh-cache', dest='refresh_cache',
                  help='clear cache first', action='store_true')
    options, args = op.parse_args()

    if not options.refresh_cache:
        load_cache()
    else:
        save_cache()

    if not args:
        print >> sys.stderr, 'Specify module(s) to generate:'
        print >> sys.stderr, '  %s' % ' '.join(modules.keys())

    if not options.dir:
        options.dir = os.path.join(script_dir, os.path.pardir, 'pyglet', 'GL')
    if not os.path.exists(options.dir):
        os.path.makedirs(options.dir)

    for arg in args:
        if arg not in modules:
            print >> sys.stderr, "Don't know how to make '%s'" % arg
            continue

        modules[arg].wrap(options.dir)

