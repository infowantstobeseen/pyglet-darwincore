#!/usr/bin/env python

'''Generate files in pyglet/GL and pyglet/GLU
'''

__docformat__ = 'restructuredtext'
__version__ = '$Id$'

import marshal
import optparse
import os.path
import urllib2
import sys
import textwrap

from wraptypes.wrap import CtypesWrapper

GL_H = '/usr/include/GL/gl.h'
GLX_H = '/usr/include/GL/glx.h'
GLEXT_URL = 'http://oss.sgi.com/projects/ogl-sample/ABI/glext.h'
GLXEXT_URL = 'http://oss.sgi.com/projects/ogl-sample/ABI/glxext.h'
WGLEXT_URL = 'http://oss.sgi.com/projects/ogl-sample/ABI/wglext.h'
NV_GLEXT_URL = 'http://developer.download.nvidia.com/opengl/includes/glext.h'
NV_GLXEXT_URL = 'http://developer.download.nvidia.com/opengl/includes/glxext.h'
NV_WGLEXT_URL = 'http://developer.download.nvidia.com/opengl/includes/wglext.h'

script_dir = os.path.abspath(os.path.dirname(__file__))
CACHE_FILE = os.path.join(script_dir, '.gengl.cache')
_cache = {}

def load_cache():
    global _cache
    if os.path.exists(CACHE_FILE):
        try:
            _cache = marshal.load(open(CACHE_FILE, 'rb')) or {}
        except:
            pass
    _cache = {}

def save_cache():
    try:
        marshal.dump(_cache, open(CACHE_FILE, 'wb'))
    except:
        pass

def read_url(url):
    if url in _cache:
        return _cache[url]
    if url[0] == '/':
        data = open(url).read()
    else:
        data = urllib2.urlopen(url).read()
    _cache[url] = data
    save_cache()
    return data

class GLWrapper(CtypesWrapper):
    def __init__(self, header, library_module, file):
        self.header = header
        self.library_module = library_module
        super(GLWrapper, self).__init__(None, file)

    def print_preamble(self):
        import time
        print >> self.file, textwrap.dedent("""
            '''Wrapper for %(header)s

            Generated by %(script)s.
            Do not modify this file.
            '''

            __docformat__ = 'restructuredtext'
            __version__ = '$Id$'

            from ctypes import *
            from %(library_module)s import link_function as _link_function
        """ % {
            'header': self.header,
            'date': time.ctime(),
            'script': __file__,
            'library_module': self.library_module,
        }).lstrip()

    def handle_ctypes_function(self, name, restype, argtypes):
        self.all_names.append(name)
        print >> self.file, '%s = _link_function(%r, %s, [%s])' % \
            (name, name, str(restype), ', '.join([str(a) for a in argtypes]))
             
    def handle_ctypes_variable(self, name, ctype):
        assert False

def write_gl(dir):
    progress('Generating GL...')
    source = read_url(GL_H)
    outfile = open(os.path.join(dir, 'GL.py'), 'w')
    wrapper = GLWrapper('gl.h', 'pyglet.GL.lib', outfile)
    wrapper.wrap(source)

def write_glx(dir):
    progress('Generating GLX...')
    source = read_url(GLX_H)
    prerequisite = textwrap.dedent('''
        typedef unsigned long XID;
    ''')
    source = prerequisite + source
    outfile = open(os.path.join(dir, 'GLX.py'), 'w')
    wrapper = GLWrapper('glx.h', 'pyglet.GL.lib', outfile)
    wrapper.wrap(source)

def progress(msg):
    print >> sys.stderr, msg
        
if __name__ == '__main__':
    op = optparse.OptionParser()
    op.add_option('--gl-dir', dest='gldir',
                  help='generate GL files in DIR', metavar='DIR')
    op.add_option('--glu-dir', dest='gludir',
                  help='generate GLU files in DIR', metavar='DIR')
    op.add_option('--no-gl', dest='nogl',
                  help="don't generate GL or GLEXT files")
    op.add_option('--no-glext', dest='noglext',
                  help="don't generate GLEXT files")
    op.add_option('--no-glx', dest='noglx',
                  help="don't generate GLX files")
    op.add_option('--no-glxext', dest='noglxext',
                  help="don't generate GLXEXT files")
    op.add_option('--no-glu', dest='noglu',
                  help="don't generate GLU files")
    op.add_option('-r', '--refresh-cache', dest='refresh_cache',
                  help='clear cache first')
    options, args = op.parse_args()

    if not options.refresh_cache:
        load_cache()
    else:
        save_cache()

    if not options.gldir:
        options.gldir = os.path.join(script_dir, 
                                     os.path.pardir,
                                     'pyglet', 'GL')

    if not options.nogl:
        if not os.path.exists(options.gldir):
            os.path.makedirs(options.gldir)
        write_gl(options.gldir)

    if not options.noglx and sys.platform == 'linux2':
        glxdir = os.path.join(options.gldir, 'GLX')
        if not os.path.exists(glxdir):
            os.path.makedirs(glxdir)
        write_glx(glxdir)

    if not options.noglu:
        if not options.gludir:
            options.gludir = os.path.join(script_dir, 
                                          os.path.pardir,
                                         'pyglet', 'GLU')
        if not os.path.exists(options.gludir):
            os.path.makedirs(options.gludir)


