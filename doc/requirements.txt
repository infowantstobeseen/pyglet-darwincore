Functional Requirements
=======================

This document is parsed by tests/test.py to produce the test cases and
test reports.  See test.py for an overview of how this all works.

Keep the formatting of this file within reStructured text.  Sections
are designated with definition lists; section descriptions and the
implementation table appear within fields.  (One implementation table per
section).

Add a component by adding a row to the appropriate implementation table.  Add
a capability by adding a column where it's needed.  Keep these names to
lower/UPPER case respectively, no non-alphanumeric chars.

Mark off progress for each component/capability pair with:

+---+--------------------------------------------+
| X | Implemented                                |
+---+--------------------------------------------+
| / | Partially implemented (ignored by test.py) |
+---+--------------------------------------------+
|   | Not yet implemented.                       |
+---+--------------------------------------------+

Outside of these boundaries, add any valid reStructured text within
or outside of sections to describe higher-level concerns; this will
be conveniently ignored by test.py.

pyglet
    window
        :description: Platform windowing and events.
        :implementation:
            ============================== === === ===
            Component                      X11 WIN OSX
            ============================== === === ===
            MULTIPLE_WINDOW_OPEN            X   X   X
            EVENT_KEY                       X   X   X
            EVENT_TEXT                      X   X   X
            EVENT_BUTTON                    X       X
            EVENT_MOUSE_MOTION              X       X
            EVENT_MOUSE_ENTER_LEAVE         X       X
            EVENT_MOUSE_SCROLL                      X
            EVENT_CLOSE                     X       X
            EVENT_EXPOSE                    X       X
            EVENT_RESIZE                    X       X
            EVENT_MOVE                      X       X
            EVENT_ACTIVATE_DEACTIVATE               X
            EVENT_SHOW_HIDE                         X
            WINDOW_SET_SIZE                         X
            WINDOW_SET_MIN_MAX_SIZE                 X
            WINDOW_ACTIVATE                         X
            WINDOW_SET_VISIBLE                      X
            WINDOW_MINIMIZE_MAXIMIZE                X
            WINDOW_SET_EXCLUSIVE_MOUSE              X
            WINDOW_SET_EXCLUSIVE_KEYBOARD           X
            WINDOW_SET_FULLSCREEN
            WINDOW_INITIAL_FULLSCREEN
            WINDOW_CAPTION                  X       X
            WINDOW_BORDERS                  
            WINDOW_ICON
            WINDOW_CURSOR
            MULTIPLE_SCREEN
            ============================== === === ===

        TBD:
         - better failure handling when eg. GLX is not available
         - shared OGL context (textures, etc.) between windows

           OSX: you can share objects by passing a context as "share" in
                the aglCreateContext call. That specified context is used
                to store all OpenGL objects created by the new context
                (ie. the new context doesn't have its own object store).

           X11: you can share objects by passing a context as "share_list"
                in the glXCreateNewContext call. That specified context
                is used in the same manner as OSX.

           Win: you call wglShareLists(ctx1, ctx2) to share from one
                context to another. Context ctx1 is used in the same
                manner as OSX sharing. If ctx2 has any objects created
                before calling this function they are destroyed.

           <rj> yes, we should make this the default. We should have a
                global context, but allow the factory to create a new
                context if the programmer wishes. The programmer should
                also be able to pass in another window which they wish to
                share the context from.

                This could cause programming errors. We will need to store
                Contexts separately from Windows so that they're only freed
                when there's no references to them.

         - all platforms: update GL context when window is moved, resized,
           or display properties change (e.g., change resolution).
         - poll: which platforms can do borderless/translucent GL windows?

           OS X: http://developer.apple.com/samplecode/BoingX/index.html

         - ensure all mouse coordinates are returned as floats
         - scroll wheel is not mouse buttons, despite what X11 will tell
           you; use on_mouse_scroll instead.
         - OS X does not receive motion events when window doesn't have
           focus; ensure this is also the case for other platforms (or
           find workaround for Carbon).
         - rename "buttonpress", "buttonrelease" to "mousepress", or
           "mousebuttonpress" or "mouse_button_press" or something..?  avoid
           collision with future buttons (e.g. on joysticks), and keep
           consistent with mousemotion.

           <ah> will be on_mouse_press, on_mouse_release, on_mouse_move, etc.

         - similar for enter/leave?
         - event for click, including click_count (for double/triple clicks)
         - or should we delegate this to the gui layer, which will know
           where the click occured?
         - event for context-menu invocation (right-mouse button, ctrl+click
           on mac, menu key on some keyboards).
         - (maybe) event for drag (on os x, this is motion with a button
           down; also consistent with java awt).
         - OS X apps require a unique 4 character creator code.  I have
           registered "PYGL" with Apple, which can be the default; there
           should probably also be a mechanism for people to use their own
           creator codes instead.
         - Enable/disable live resizing? (possible on OS X, what about
           others?)
         - on_expose should include a list of rectangles that were
           invalidated?
         - windows should be created hidden, and shown by method call.  this
           allows applications to get an initial on_show and on_resize event.
         - events for system sleep/shutdown and display change
         - method to disable screensaver

    event
        :description: Platform-independent events.
        :implementation:
            ============================== === === ===
            Component                      X11 WIN OSX
            ============================== === === ===
            ============================== === === ===

    clock
        :description: High-resolution timing and FPS measurement.
        :implementation:
            ============================== === === ===
            Component                      X11 WIN OSX
            ============================== === === ===
            ============================== === === ===

    console
        :description: Interactive debug "widget".

        TBD:
         - remove SDL dependency
         - move to pyglet.gui
   
    dds
        :description: Compressed texture support.

        TBD:
         - move to pyglet.image
         - support all formats
         - software fallback

    sprite
        TBD:
         - OBB or AABB collision before occlusion query
         - animated sprites, or animated textures
         - according to DESIGN, this should be in scene2d

    model
        :description: Abstract interface for 3D modelling.

        TBD:
         - support for the DirectX model format would be good as it has
           animations and skellingtons.
         - according to DESIGN, this should be in scene3d
    
        obj
            :description: Wavefront OBJ support.
            :implementation:
                ============================== =======
                Component                      GENERIC
                ============================== =======
                OBJ_LOAD                          X
                ============================== =======
            
        geometric
            :description: Parametric 3D geometry support.

            TBD:
             - integrate with euclid.  Consistent draw/collide/response
               interface
            
    image
        :description: Image file load and save.
        :implementation:
            ============================== === === ===
            Component                      X11 WIN OSX
            ============================== === === ===
            PNG_LOAD                        X       X
            PNG_SAVE
            JPEG_LOAD                       X
            JPEG_SAVE
            DDS_LOAD                        /   /   /
            DDS_SAVE
            ============================== === === ===

        TBD:
         - libpng and libjpeg require setjmp support; we should work
           around this or use another library.
         - DDS stuff, see pyglet.dds.

        sdl
            :description: SDL_Image support.

            TBD:
            - remove

    shader
        :description: Abstract interface to GLSL.
        
        TBD:
         - documentation (this is actually no worse documented than anything
           else...)
         - sample shaders
         - what about creating shader trees?
         - what is the value of the usexx methods on ShaderProgram?  do
           we like wrapping objects around GL?

    text
        :description: Text rendering.
        :implementation:
            ============================== === === ===
            Component                      X11 WIN OSX
            ============================== === === ===
            TTF_LOAD                        X 
            TEXT_RENDERING                  X
            ============================== === === ===

        TBD:
         - render to multiple textures when glyphs don't fit
         - line breaks
         - attributed character strings (styling)
         - bidi
         - vertical text
         - find system fonts (and identify variants)
         - support surrogate pairs (impossible with truetype?)
         - pre-rendering of latin-1 (or is ASCII enough?)
         - multiline rendering (pyglyph)

    gui
        :description: 2D graphical user interface.

        TBD:
         - more widgets
        
        layout
            :description: Automatic layout of GUI widgets.

            TBD:
             - finish, refactor out button and interpolators

        fps
            :description: Render an FPS counter to the screen
            :implementation:
                ============================== =======
                Component                      GENERIC
                ============================== =======
                RENDER_FPS                        X 
                ============================== =======
        
process
    :description: Issues with development and test process.

     - should DESIGN be rolled into this document?
     - can/should we integrate an issue tracker into requirements/test?

