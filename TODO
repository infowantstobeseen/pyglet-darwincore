IMPLEMENTATION STATUS / TODO LIST
---------------------------------

pyglet.GL & pyglet.GLU
    tools/gl2ctypes.py still needs a bit of work as some files needed
    fixing by hand.

pyglet.window
    =================================== ==== ==== ===
    Component                           X11  Win  OSX
    =================================== ==== ==== ===
    MULTIPLE WINDOW OPEN                 X    X    X
    FULLSCREEN OPEN
    SWITCH FULLSCREEN / WINDOWED
    EVENT_KEYPRESS / _KEYRELEASE         X    X    X
    EVENT_TEXT                           X
    EVENT_TEXT???   (cursor control)
    EVENT_BUTTONPRESS / _BUTTONRELEASE   X
    EVENT_MOUSEMOTION                    X
    EVENT_CLOSE                          X
    EVENT_ENTER / _LEAVE                 X
    EVENT_EXPOSE                         X
    EVENT_RESIZE                         X
    EVENT_MOVE                           X
    Border type 
      (resizable/not/thin/none/etc)
    Set caption                          X    X    X
    Set icon
    Select screen (multi-monitor)
    Exclusive input
    =================================== ==== ==== ===

    TBD: better failure handling when eg. GLX is not available
    TBD: shared OGL context (textures, etc.) between windows

pyglet.event & pyglet.clock
    Done.

pyglet.console
    TBD: remove SDL dependency
         finish, make pretty

pyglet.dds
    TBD: move to pyglet.image
         Support all formats
         Software fallback
         Save

pyglet.sprite
    TBD: update for pyglet.image changes
         OBB or AABB collision before occlusion query
         animated sprites

pyglet.model
    TBD: support for the DirectX model format would be good as it has
    animations and skellingtons.
         Also consider our own format + a blender export for it (for
           animations, armature etc).

pyglet.model.obj & pyglet.model.geometric
    TBD: more geometric models needed.
         Integrate with euclid.  Consistent draw/collide/response interface.

pyglet.image
    ========== ==== ==== ===  =========================================
    Component  X11  Win  OSX  Note
    ========== ==== ==== ===  =========================================
    PNG LOAD    X         X   (libpng requires setjmp support)
    PNG SAVE
    JPEG LOAD   X             (libjpeg requires setjmp support)
    JPEG SAVE
    DDS LOAD    .    /    .   (DXT5 only so far - see pyglet.dds above)
    ========== ==== ==== ===  =========================================
      - Work around libpng and libjpeg if possible.

pyglet.image.sdl
    TBD: REMOVE

pyglet.shader
    TBD: documentation  <--- this goes for everywhere :-)
    TBD: sample shaders

pyglet.text
    ================= ==== ==== ===
    Component         X11  Win  OSX
    ================= ==== ==== ===
    TEXT RENDERING     X
    ================= ==== ==== ===

    TBD: rendering of missing glyphs
         Currently we pre-render printable ASCII and lay the glyphs out
         in the container texture in a straight grid using the max height
         of the ASCII glyphs. Two issues arise:

         - There is a chance that a new glyph is taller than that max height.
         - We also waste space (though not much)

    Also: render to multiple textures when glyphs don't fit
          line breaks, 
          attributed text (what's this? styling?), 
          bidi,
          vertical text,
          find system fonts (and identify variants),
          support surrogate pairs (impossible with truetype?)

pyglet.text.base
    TBD: rendering to common texture
    TBD: pre-rendering of latin-1
    TBD: multiline rendering (pyglet)

pyglet.gui
    TBD: more widgets

pyglet.gui.layout
    TBD: finish, refactor out button and interpolators

pyglet.gui.fps
    TBD: handle positioning argument

